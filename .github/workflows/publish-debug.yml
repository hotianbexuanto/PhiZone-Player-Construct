name: Publish with Debug
run-name: Publish builds with debug targets
on:
  push:
    branches:
      - defres
  pull_request:
    branches:
      - defres
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  metadata:
    name: Retrieve metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: defres

      - name: Specify version
        id: version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Specify current datetime
        id: current-datetime
        run: echo "CURRENT_DATETIME=$(date +'%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      current-datetime: ${{ steps.current-datetime.outputs.CURRENT_DATETIME }}

  publish-tauri:
    name: Build with Tauri
    needs: metadata
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Confirm build version and datetime
        run: |
          echo "Version: ${{ needs.metadata.outputs.version }}"
          echo "Build datetime: ${{ needs.metadata.outputs.current-datetime }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: defres

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm i

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          includeDebug: ${{ matrix.platform == 'ubuntu-22.04' && 'false' || 'true' }}
          tagName: v${{ needs.metadata.outputs.version }}_${{ needs.metadata.outputs.current-datetime }} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v${{ needs.metadata.outputs.version }} ${{ needs.metadata.outputs.current-datetime }}'
          releaseBody: 'Automated release with debug builds. See the assets for downloads.\n*Debug builds for Linux are not included due to unexpectedly lengthy packaging times.*'
          prerelease: true
          args: ${{ matrix.args }}

  publish-capacitor-android:
    name: Build for Android
    runs-on: ubuntu-latest
    needs: [metadata, publish-tauri]
    steps:
      - name: Confirm build version and datetime
        run: |
          echo "Version: ${{ needs.metadata.outputs.version }}"
          echo "Build datetime: ${{ needs.metadata.outputs.current-datetime }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: defres

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: pnpm i

      - name: Create build
        run: pnpm build && pnpm cap update

      - name: Generate icons and splash screen
        run: if [ -d "./resources" ]; then pnpm i -D @capacitor/assets && pnpm capacitor-assets generate --android; fi

      - name: Build app bundle
        run: cd android && chmod +x ./gradlew && ./gradlew bundle && ./gradlew assembleDebug

      - name: Decode Android signing key
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      - name: Rename build files
        run: |
          mv ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/PhiZone.Player_${{ needs.metadata.outputs.version }}_arm64-signed.aab
          mv ./android/app/build/outputs/apk/debug/app-debug.apk ./android/app/build/outputs/apk/debug/PhiZone.Player_${{ needs.metadata.outputs.version }}_arm64-debug.apk

      - name: Build release
        run: |
          gh release upload "v${{ needs.metadata.outputs.version }}_${{ needs.metadata.outputs.current-datetime }}" \
          ./android/app/build/outputs/bundle/release/PhiZone.Player_${{ needs.metadata.outputs.version }}_arm64-signed.aab \
          ./android/app/build/outputs/apk/debug/PhiZone.Player_${{ needs.metadata.outputs.version }}_arm64-debug.apk
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
