name: Build App with pnpm

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write  # 允许 GitHub Actions 写入内容（包括推送标签）

jobs:
  build:
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 作为执行环境

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node.js and pnpm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm
        run: npm install -g pnpm  # 安装 pnpm

      # Step 3: Install dependencies with pnpm
      - name: Install dependencies
        run: pnpm install  # 使用 pnpm 安装依赖

      # Step 4: Build the project with pnpm
      - name: Build project
        run: pnpm build  # 使用 pnpm build 构建项目

      # Step 5: Setup JDK 17 (for Gradle)
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 6: Give gradlew execute permission
      - name: Give gradlew execute permission
        run: chmod +x android/gradlew

      # Step 7: Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 8: Execute Gradle build
      - name: Run Gradle build
        run: |
          npx cap sync android
          cd android
          ./gradlew build

      # Step 9: Compress build output and save filename to variable
      - name: Compress build files
        id: zip
        run: |
          BUILD_TIME=$(date +'%Y%m%d%H%M%S')
          ZIP_FILE="PhiZone-${BUILD_TIME}.zip"
          zip -r $ZIP_FILE android/app/build/ build
          echo "ZIP_FILE=${ZIP_FILE}" >> $GITHUB_ENV

      # Step 10: Create a timestamped tag (dev-YYYYMMDDHH format)
      - name: Create 'dev' tag with timestamp
        id: create_tag
        run: |
          TAG_NAME="dev-$(date +'%Y%m%d%H%M%S')"
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          
          # Check if the tag already exists, and create a new one if it does
          TAG_EXISTS=$(git tag -l $TAG_NAME)
          if [ "$TAG_EXISTS" != "" ]; then
            # If tag exists, modify the tag name by adding a suffix (e.g., dev-YYYYMMDDHHMM-1)
            SUFFIX=1
            NEW_TAG_NAME="${TAG_NAME}-${SUFFIX}"
            echo "New tag: $NEW_TAG_NAME"
            git tag $NEW_TAG_NAME
            git push origin $NEW_TAG_NAME
          else
            # If tag doesn't exist, create the tag
            git tag $TAG_NAME
            git push origin $TAG_NAME
          fi

      # Step 11: Upload release to GitHub Releases
      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}  # 使用刚刚创建的标签
          files: ${{ env.ZIP_FILE }}  # 上传刚刚创建的压缩文件
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}