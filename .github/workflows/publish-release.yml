name: Publish
run-name: Publish release builds
on:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  metadata:
    name: Retrieve metadata
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Specify version
        id: version
        run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Specify current datetime
        id: current-datetime
        run: echo "CURRENT_DATETIME=$(date +'%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.version.outputs.VERSION }}
      current-datetime: ${{ steps.current-datetime.outputs.CURRENT_DATETIME }}

  publish-capacitor-ios:
    name: Build for iOS
    runs-on: macos-latest
    needs: metadata
    permissions:
      contents: write
    steps:
      - name: Confirm build version and datetime
        run: |
          echo "Version: ${{ needs.metadata.outputs.version }}"
          echo "Build datetime: ${{ needs.metadata.outputs.current-datetime }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Install dependencies
        run: pnpm i

      - name: Install iOS dependencies
        run: |
          cd ios/App
          pod install

      - name: Create build
        run: pnpm build

      - name: Generate icons and splash screen
        run: if [ -d "./resources" ]; then pnpm i -D @capacitor/assets && pnpm capacitor-assets generate --ios; fi

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build project
        run: |
          xcodebuild -workspace ios/App/App.xcworkspace -scheme App \
          -destination generic/platform=iOS -archivePath $RUNNER_TEMP/App.xcarchive \
          clean archive

      - name: Assemble IPA
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.APPLE_EXPORT_OPTIONS }}
        run: |
          EXPORT_OPTIONS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTIONS_PATH
          xcodebuild archive -archivePath $RUNNER_TEMP/App.xcarchive \
          -exportArchive -exportOptionsPlist $EXPORT_OPTIONS_PATH \
          -exportPath $RUNNER_TEMP/build -allowProvisioningUpdates

      - name: Rename build file
        run: mv $RUNNER_TEMP/build/App.ipa $RUNNER_TEMP/build/PhiZone.Player_${{ needs.metadata.outputs.version }}.ipa

      - name: Publish release
        run: |
          gh release create "v${{ needs.metadata.outputs.version }}" \
          --title "v${{ needs.metadata.outputs.version }}" \
          --notes "See the assets for downloads." --draft \
          $RUNNER_TEMP/build/PhiZone.Player_${{ needs.metadata.outputs.version }}.ipa
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision

  publish-capacitor-android:
    name: Build for Android
    runs-on: ubuntu-22.04
    needs: [metadata, publish-capacitor-ios]
    permissions:
      contents: write
    steps:
      - name: Confirm build version and datetime
        run: |
          echo "Version: ${{ needs.metadata.outputs.version }}"
          echo "Build datetime: ${{ needs.metadata.outputs.current-datetime }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Install dependencies
        run: pnpm i

      - name: Create build
        run: pnpm build

      - name: Generate icons and splash screen
        run: if [ -d "./resources" ]; then pnpm i -D @capacitor/assets && pnpm capacitor-assets generate --android; fi

      - name: Build app bundle
        run: cd android && chmod +x ./gradlew && ./gradlew bundle && ./gradlew assemble

      - name: Decode Android signing key
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decoded.jks

      - name: Sign builds
        run: |
          jarsigner -keystore android/release.decoded.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/PhiZone.Player_${{ needs.metadata.outputs.version }}-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab release

      - name: Rename build file
        run: |
          mv ./android/app/build/outputs/apk/debug/app-debug.apk ./android/app/build/outputs/apk/debug/PhiZone.Player_${{ needs.metadata.outputs.version }}.apk
          mv ./android/app/build/outputs/apk/release/app-release-unsigned.apk ./android/app/build/outputs/apk/release/PhiZone.Player_${{ needs.metadata.outputs.version }}-unsigned.apk

      - name: Publish release
        run: |
          gh release upload "v${{ needs.metadata.outputs.version }}" \
          ./android/app/build/outputs/bundle/release/PhiZone.Player_${{ needs.metadata.outputs.version }}-signed.aab \
          ./android/app/build/outputs/apk/release/PhiZone.Player_${{ needs.metadata.outputs.version }}-unsigned.apk \
          ./android/app/build/outputs/apk/debug/PhiZone.Player_${{ needs.metadata.outputs.version }}.apk
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

  publish-tauri:
    name: Build with Tauri
    needs: [metadata, publish-capacitor-ios]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'ubuntu-22.04-arm'
            args: ''
          - platform: 'windows-latest'
            args: ''
          - platform: 'windows-latest'
            args: '--target aarch64-pc-windows-msvc'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Confirm build version and datetime
        run: |
          echo "Version: ${{ needs.metadata.outputs.version }}"
          echo "Build datetime: ${{ needs.metadata.outputs.current-datetime }}"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || (matrix.platform == 'windows-latest' && 'aarch64-pc-windows-msvc' || '') }}

      - name: Install dependencies (Ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-')
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm i

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tagName: v${{ needs.metadata.outputs.version }}
          releaseName: 'v${{ needs.metadata.outputs.version }}'
          releaseBody: 'See the assets for downloads.'
          releaseDraft: true
          args: ${{ matrix.args }}
